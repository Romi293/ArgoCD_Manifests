name: ArgoCD_Pipeline
on:
  push: 
    branches:
      - main

jobs:
   
  build:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "New Version: $NEW_VERSION"
          # docker build --build-arg VERSION_NUMBER=${{ needs.versioning.outputs.new_version }} -t "romi293/java_github_actions:${{ needs.versioning.outputs.new_version }}" .        
          docker build --build-arg VERSION_NUMBER=${{ env.NEW_VERSION }} -t "romi293/java_github_actions:${NEW_VERSION}" .
          
      - name: Publish to DockerHub
        run: |
          echo "IMAGE romi293/java_github_actions:${{ needs.versioning.outputs.new_version }}"
          echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker tag "romi293/java_github_actions:${{ needs.versioning.outputs.new_version }}" "romi293/java_github_actions:latest"
          docker push "romi293/java_github_actions:${{ needs.versioning.outputs.new_version }}"
      

       
########################################################

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Pull image from DockerHub
        run: 
          docker pull "romi293/java_github_actions:${{ needs.versioning.outputs.new_version }}"

      - name: Start Docker container
        run: docker run -d -p 8080:8080 --name maven-app "romi293/java_github_actions:${{ needs.versioning.outputs.new_version }}"

      - name: Check if container is running
        run: docker ps -a | grep maven-app
      
      - name: Display Docker container logs
        run: docker logs maven-app  

